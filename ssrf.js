//Server-Side Request Forgery

const express = require("express");
const axios = require("axios");
const app = express();

app.use(express.json());

app.post("/fetch-data", async (req, res) => {
  const { url } = req.body;

  // Vulnerable: No validation of `url`, allowing internal or external requests
  try {
    const response = await axios.get(url);
    res.json(response.data);
  } catch (error) {
    res.status(500).send("Error fetching data");
  }
});

/*
{
  "url": "http://0.0.0.0/latest/meta-data/"
}

*/

app.listen(3000, () => {
  console.log("Server running on port 3000");
});

/*
Fix: Validate and sanitize URLs to prevent SSRF attacks. 

const allowedDomains = ['example.com', 'api.example.com'];

    try {
        const urlObject = new URL(url);
        if (!allowedDomains.includes(urlObject.hostname)) {
            return res.status(400).send('Invalid URL');
        }
        
        const response = await axios.get(url);
        res.json(response.data);
    } catch (error) {
        res.status(500).send('Error fetching data');
    }

Example: Restrict requests to known safe endpoints and avoid allowing arbitrary URLs.
*/
// Example URL to trigger: POST to `http://localhost:3000/fetch-data` with body `{ "url": "http://localhost:3000/internal-resource" }`
